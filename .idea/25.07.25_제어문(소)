*Package : 특정한 목적을 공유하는 클래스와 인터페이스의 묶음
			서로 관련있는 클래스들을 묶어 효과적으로 관리하기 위해 사용되는 디렉토리.
			계층구조를 가지기 때문에 계층 간 구분은 점(.)으로 표현됨.
			패키지 선언은 소스 파일의 첫 부분에 위치해야 함.
			기본적인 자바의 패키지로는 java.lang / java.util / java.io / java.nio가 있음.
				- java.lang : 자바의 기본 클래스들을 모아놓은 패키지
				- java.util : 자바의 확장클래스를 모아놓은 패키지
				- java.io , java.nio :  자바의 입출력과 관련된 클래스를 모아놓은 패키지
				=> 주로 사용하는 String 클래스는 자바의 기본패키지로 java.lang에 속해있음.
					(java.lang.String)
* import : 다른 패키지 내의 클래스를 사용하기 위해 사용.
			일반적으로 패키지 구문과 클래스문 사이에 작성.
			import의 사용없이 다른 패키지를 쓰려면 매번 패키지명을 붙여줘야함.
			import를 해야 컴파일러에게 미리 소스파일에 사용된 클래스의 정보를 제공해서 패키지 사용가능.
				[예시] - import 사용 안했을 때
				
				package package2.subpackage;
				
				public class Main{
					public static void main(String[] args) {
						packagetest.subpackage.ImportEx importEx = new packagetest.subpackage.ImportEx();
						importEx.print();
					}
				}
				
				[예시2] - import 사용했을 때
				
				package package2.subpackage;

				import package1.subpackage.ImportEx;
				// import package1.subpackage.*;

				public class Main{
					public static void main(String[] args) {
						ImportEx importEx = new ImportEx();
						importEx.print();
					}
				}

* 스트림(Stream)
- A에서 B로 이동하는 데이터의 흐름.
[입력장치]	   ---->	 [프로그램]     ---->      [출력장치]
 키보드		   스트림				  스트림			프린터
 마우스		(입력 스트림)				(출력스트림)		모니터
- 단방향이라 입력과 출력이 동시에 발생 불가능.
- 때문에 용도에 따라 입력스트림(InputStream), 출력스트림(OutputStream)이 나뉨. 
	(ex) 고속도로 : 중앙분리대로 도로자체가 나뉘어서 상행, 하행이 정해짐.
- System.in이 이 입력스트림(InputStream)인 것.
	System 클래스의 in이라는 필드가 InputStream의 정적필드임.
	
* Scanner 클래스
- 사용자로부터 입력을 받을 수 있도록 하는 클래스(키보드로 입력받음)
- 기본적인 데이터 타입을 모두 입력받을 수 있음.
- 토큰을 기준으로 데이터를 입력받음.
	* 토큰 : 공백문자(spacebar), 탭(tab), 개행(enter) 등으로 구분되는 요소.

1. 제어문
- 프로그램의 수행 순서를 제어하거나, 문장들의 반복 수행 횟수를 조절해주는 문장.
- 조건문(선택문), 반복문, 보조제어문 등으로 구성.

[제어문]	[분기(선택)문]	- 단순 if문 / 할지 말지 단순히 결정
						- if..else 문(양자 택일 구문)
						- if..else..if문(다중 택일 구문) / 성적표 - 수, 우, 미, 양, 가 등
						- switch case 구문 / 스위치처럼 껐다,켰다
		
		[반복문]			- for 구문
						- while 구문
						- do while 구문

		[보조 제어문]		- break
						- continue
					
	1) 단순 if문(true / false)
	- 조건문에 boolean 타입, 결과값이 true/false인 연산수식만 가능
	- 일반적으로 관계연산자(>=,==,!= 등), 논리연산자(&&,||,!)
	- 조건이 true일때만 코드 실행, 거짓일 경우 건너뛰고 다음 코드 실행
		* 구성
		if(condition){
			to_do_list..
		}
	
	2)if..else 문(양자 택일 구문)
	- 조건이 2개일때 사용
		* 구성
		if(condition){
			
			condition이 참(true)이면 수행될 영역
			
			}else{
			
			condition이 거짓(false)이면 수행될 영역
			
			}
			
	3) if..else..if 문(다중 택일 구문)
	-  조건이 3개 이상일 때 순차적으로 검사하여 해당조건이 참일 때 코드를 실행.
		* 구성
		if(condition){
			문장 1
		} else if (condition) {
			문장 2
		} else if (condition) {
			문장 3
		} else {
			문장 4
		}
		
