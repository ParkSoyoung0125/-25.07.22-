1. 문자 인코딩(Encoding)
				= ASCII  =>
	[인간 언어]	= UTF-8  =>		[컴퓨터 언어] 
				= UTF-16 =>
				= EUC-KR =>
				
				
	(1) 유니코드 (참고:http://www.unicode.org/charts/)
	- 모든 문자에 고유 번호(=iddex,=CodePoint)를 부여(국제 표준).
	(ex) A -> 0+0041
		 가 -> 0+AC00
		 你 -> 0+4F60
		 🐶 → U+1F436
	- 유니코드는 문자 자체가 아니라 문자에 부여된 고유 번호.
	- 실제 저장은 반드시 인코딩 방식을 거쳐야 함.
	- 처음에 16비트(65536문자)로 시작했으나 한자, 이모지 등으로 지금은 21비트 범위(U+0000 ~ U+10FFFF)
	
	
	(2) ASCII(아스키코드)
	- 문자 인코딩의 시작이라 볼수 있음(1960년대에 등장)
	- 7비트(0~127)로 구성되어 총 128개의 문자만 표현 가능
		* 알파벳, 대/소문자, 숫자, 일부 특수기호만 지원해 비영어권 문자(한글, 한자, 일본어 등) 표현 불가
	(예) 문자 'A' 처리 시
		문자(A) -> 65(ASKII) -> 2진수(02000001)
	
	
	(3) 확장 ASCII, 완성형 인코딩(한글 등장 배경)
	- 예시 : EUC-KR, CP949
	- 한글 표현을 위해 만들어진 한국어 문자 집합
	- 한글의 완성된 글자 조합만 저장(가,나,다 등 / ㄱ,ㄴ,ㄷ,ㅏ,ㅜ,ㅢ 저장 불가)
	- 국가별 문자표가 달라서 문자깨짐 발생
	
	
	(4) 유니코드를 byte로 저장하는 방식
		1) UTF(Unicode Transformation Format)
		-> 몇 비트 단위로 사용해서 index를 나타낼 것인가를 말함.		* 1byte = 8bit
			UTF-16 : 16bit씩 index를 나타낼 것이라는 의미.
					- 기본적으로 2byte(16bit)로 index를 표현		
					- BMP에 있는 문자는 2byte로 처리하나, 더 높은 index를 가지는 문자는 4byte로 처리.
						*BMP : 2byte로 표현할 수 있는 index를 가진 문자 목록
					- 사용처 : Windows 내부 시스템, Java 및 NET 환경의 내부 문자 표현 방식.
												 -> 이유 : 인코딩 시 NULL문자가 나타나지않기위해.
			
			UTF-32 : 32bit씩 index를 나타낼 것이라는 의미.
					- 기본적으로 4byte를 사용함.
			
			UTF-8 : 8bit씩 늘려가며 index를 나타낼 것이라는 의미.
					- 모든 영어는 1byte만 있으면 256개를 표현할수있어서 모든 문자를 넣을 수 있음.
					- 그렇기에 UTF-16은 손해라서 나온게 UTF-8.
					- 영어권은 1byte로 표현하고, 그보다 높은 index를 가진 문자는 
					  2byte,3byte,4byte...로 늘려가며 나타냄.
					  (ex) 영어는 1byte, 한글은 3byte를 사용.
				
		2) UCS(Universal Character Set)
		-> 몇 바이트로 index를 표현할 수 있느냐를 나타냄.
			UCS-2 = 2byte로 index를 표현, 
			UCS-4 = 4byte로 index를 표현.
		
		* UTF-8, UTF-16, UTF-32, UCS-2, UCS-4 모두 유니코드의 문자 index를 나타내기 위한 방법이기에
		서로간의 변환은 잘됨(UCS-2는 한계가 있음)
		
	
		
	* 실무에서 인코딩 다룰 때 주의할 점
	-1) 파일 인코딩을 명시적으로 지정.
	-2) 네트워크 통신 시 Content-Type 헤더에 charset=UTF-8 지정 필요
	-3) 데이터베이스 설정 시 문자셋/콜레이션 확인
	-4) 문자 깨짐 방지 -> 서버,클라이언트,DB 모두 인코딩이 필수적으로 일치해야함.

2. JAVA의 인코딩(Encoding)
	- Java는 String을 처리할 때 내부(메모리)에서는 UTF-16으로 문자열을 저장.
	- 송수신 시 직렬화가 필요한 경우 변형된 UTF-8을 사용함.
	- 문자열 입출력 시 사용자가 지정한 인코딩 값 또는 운영체제의 기본 인코딩값으로 문자열 인코딩.
	
	만약 이클립스의 File encoding이 UTF-8이라면,
	 입력		->		송수신		->		자바 메모리		->		송수신		->		출력
	(UTF-8)			(modified UTF-8)		(UTF-16)			(modified UTF-8)	  (UTF-8)
	1) 운영체제나 시스템에 설정된 인코딩 형식으로 입력
	2) UTF-16으로 인코딩되어 메모리에 업로드
	3) 출력 시 메모리에 UTF-16으로 저장되어있는 값을 다시 운영체제나 시스템에 설정된 인코딩 형식으로 문자 출력
		* 직렬화 또는 소수의 특수케이스를 제외하고는 UTF-16으로 표현됨.
		
		
	*Package : 특정한 목적을 공유하는 클래스와 인터페이스의 묶음
		서로 관련있는 클래스들을 묶어 효과적으로 관리하기 위해 사용되는 디렉토리.
		계층구조를 가지기 때문에 계층 간 구분은 점(.)으로 표현됨.
		패키지 선언은 소스 파일의 첫 부분에 위치해야 함.
		기본적인 자바의 패키지로는 java.lang / java.util / java.io / java.nio가 있음.
			- java.lang : 자바의 기본 클래스들을 모아놓은 패키지
			- java.util : 자바의 확장클래스를 모아놓은 패키지
			- java.io , java.nio :  자바의 입출력과 관련된 클래스를 모아놓은 패키지
			=> 주로 사용하는 String 클래스는 자바의 기본패키지로 java.lang에 속해있음.
				(java.lang.String)
	
	* import : 다른 패키지 내의 클래스를 사용하기 위해 사용.
		일반적으로 패키지 구문과 클래스문 사이에 작성.
		import의 사용없이 다른 패키지를 쓰려면 매번 패키지명을 붙여줘야함.
		import를 해야 컴파일러에게 미리 소스파일에 사용된 클래스의 정보를 제공해서 패키지 사용가능.
			[예시] - import 사용 안했을 때
			
			package package2.subpackage;
			
			public class Main{
				public static void main(String[] args) {
					packagetest.subpackage.ImportEx importEx = new packagetest.subpackage.ImportEx();
					importEx.print();
				}
			}
			
			[예시2] - import 사용했을 때
			
			package package2.subpackage;

			import package1.subpackage.ImportEx;
			// import package1.subpackage.*;

			public class Main{
				public static void main(String[] args) {
					ImportEx importEx = new ImportEx();
					importEx.print();
				}
			}

	* 스트림(Stream)
	- A에서 B로 이동하는 데이터의 흐름.
	
	[입력장치]	   ---->	 [프로그램]     ---->      [출력장치]
	 키보드		   스트림				  스트림			프린터
	 마우스		(입력 스트림)				(출력스트림)		모니터
	 
	- 단방향이라 입력과 출력이 동시에 발생 불가능.
	- 때문에 용도에 따라 입력스트림(InputStream), 출력스트림(OutputStream)이 나뉨. 
		(ex) 고속도로 : 중앙분리대로 도로자체가 나뉘어서 상행, 하행이 정해짐.
	- 자바에서 가장 기본이 되는 입력 스트림이 InputStream / 출력은 OutputStream.
	- System.in이 이 입력스트림(InputStream)인 것. = 데이터를 화면에서 입력받기
		(System 클래스의 in이라는 필드가 InputStream의 정적필드)
	- 사람이 키보드로 치거나 입력을 넣어주는 것은 System.In을 통해 연결됨
	
	* Type별 InputStream
	Byte Type = InputStream
		* 1byte만 읽고 나머지 데이터는 스트림에 남아버림

	Char Type = InputStreamReader
		* 문자열이 아닌 '문자'를 처리, 문자열을 입력하고싶으면 매번 배열을 선언해야함.
		* InputStream의 데이터를 문자로 변환하는 중개 역할을 함.

	Char Type 의 직렬화 = BufferedReader
		* 공백포함한 한줄 전체를 읽음. 배열 선언할 필요 없이 String으로 리턴하여 바로 받을 수 있음.
		* 스트림에 버퍼를 두어 받은 데이터를 담아두었다가 일정 조건이 되면 버퍼를 비우면서 데이터를 보냄
		(디폴트로 8192개의 문자 저장가능)
	=> 즉, 바이트단위[InputStream]로 문자를 입력받아 문자(character)를 [InputStreamReader]로 처리한 뒤
		버퍼[BufferedReader]에 담아두었다가 일정 조건이 되면 버퍼를 비우면서 데이터를 전송.
		
	* Scanner 클래스
	- 사용자로부터 입력을 받을 수 있도록 하는 클래스(키보드로 입력받음)
	- 기본적인 데이터 타입을 모두 입력받을 수 있음.
	- 토큰을 기준으로 데이터를 입력받음.
		* 토큰 : 공백문자(spacebar), 탭(tab), 개행(enter) 등으로 구분되는 요소.