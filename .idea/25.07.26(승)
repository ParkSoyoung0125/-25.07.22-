1.intellij (java 언어를 이용하여 코딩을 하기 위한 프로그램)
	1)설치
		(1) 주소 : https://www.jetbrains.com/idea/
		(2) 버전 : Community Edition for Windows
		(3) 설치 옵션 : 바로가기, 컨텍스트, PATH변수 업데이트, 연결생성(java)
		(4) 설치 후 재부팅은 경우에 따라서 한다. 재부팅 안할시 작동이 안되는 옵션이 있을 수 있음.
	2) 설정
		(1) 한글 설정 비권장
		(2) Clone Repository(GitHub등에서 데이터 가져오기)
		(3) Create Git Repository(GitHub 연동)체크
		(4) 햄버거메뉴(왼쪽 상단 줄눈)
			-appearance > theme > light : 다크모드, 라이트모드 변경
			-Use custom font : 폰트 설정
			-Editor > General > Soft-wrap these files > ;*java; 추가
			-마우스 확대기능(Mouse Control
			-encoding > UTF-8 :  한글 깨짐 방지, 
			 Global Encoding, Project Encoding, Default Encoding fo properties files > 3개항목 체크
			-Editor > Inaly hints > Code vision > Usages 항목 체크 해제(project내 사용 코드 관련 도움말 자동 작성)
		(5) jdk : 최신 버전의 전 버전이나, 전전 버전 사용, 이유는 최신 버전은 불안정 할수 있음.
			-설정은 햄버거 메뉴에서 Project Structuer
			-jdk 버전이랑 Language Level 맞추기
			
				**설정 단축키 :  crtl + alt + s
	3) 사용법
		(1) Project 닫기 : 햄버거 메뉴 > close Project
		(2) Project 목록 삭제 : 아무 Project도 열리지 않은 intellij 화면에서, Remove Recent Project
		(3) Project 삭제 : Project열린 상태에서 Main Project 누르고 키보드 Delete
			*운영 체재에서는 남아있기 때문에 완벽한 삭제를 원한다면 저장경로에 들어가 나머지 파일들을 삭제해야 한다.
			*삭제 순서 : GitHub 연동 끊기 > 운영 체재에서 삭제 > 목록에서 제거
		

2. Git & GitHub
	1) Git & Github 이란 ?
		(1) Git은 로컬 컴퓨터에 저장하는 방식이고 이렇게 저장된 것들을 클라우드 방식으로 모아서 다시 저장하는 곳이 GitHub다.
		(2) Git을 사용하는 이유는 버전관리, 백업, 협동등을 위해서이다.
	2) Git과 GitHub를 Intellij에 연결하기
		(1) Git 설치 (https://git-scm.com/downloads)
		(2) GitHub 회원 가입
		(3) GitHub에서 Repository만들기
		(4) Intellij에서 Git과 연동하기
			*Version > Git > Path to Git executable(git.exe 파일 할당)
		(5) GitHub와 연동하기
			*Version > GitHub > login via GitHub
			
				**Git 메뉴가 안보일 경우, 햄버거 메뉴 > vcs > Git 메뉴 만들기(enable어쩌구)
	3) GitHub에 저장하기(Push)
		(1) 먼저 GitHub에 저장이 되는 순서는 WorkTree(작업중인 폴더) > (+add)Stage > (push)Repository 이다.
		(2) Intellij에서 내 GitHub Repository 주소를 연결한다.
			*햄버거 메뉴 > Git > Manage reomtes 에서 연결인 Repository 주소 관리
		(3) 저장을 원하는 파일을 Add 해주고, commit(일종의 체크포인트 개념) 한뒤에 Push(내보내기의 개념)를 해서 GitHub업로드한다.			
	4) GitHub에서 가져오기(Pull)
		(1) 햄버거 메뉴 > Git > Pull
	5) Clone 만들기
		(1) Pull과 비슷하지만 다른 개념 (Pull이 덮어쓰기에 개념이라면 Clone은 복제본을 새로 만드는 개념)
		(2) 햄버거 메뉴 > Git > clone > 대상 주소 넣기
		
				**commit, push, pull 과정에서 collabolation중인 팀원이 있다면, 팀원들과 project 버전을 맞춰야 한다.


3. Java
	1) Java에 대해서
		(1) src > package > class 파일 순으로 분류된다.
		(2) Java에서 기능이란 Method라고 말할 수 있는데, Method는 명령어의 기능을말한다.
			* println의 Method는 문자 출력 후 줄을 바꿔준다.
		(3) Java는 Camel case(낙타봉 표기법)으로 되어있다.(Jave 교안(이론) 10p 참고)
	2) Java에서의 코딩
		(1) Java에서 문자열은 " ", 문자는 ' '로 사용한다.
			* "Java", 'J'
		(2) 특수문자(escape 시퀀스) : 명령어에 영향을 주는 문자는 백슬래쉬 + a로 특수문자를 입력한다, 이때 특수문자는 하나의 문자로 인식한다.
			* \n(엔터 키), \t(탭 키), \"(쌍따옴표), \'(외따옴표), \\(백 슬래쉬)
		(3) Class 만들기
			 *New Project 생성 > Package 생성 > Java Class 생성
		(4) Class를 만든 후 기본적으로는 Main Method를 입력해준다.
		(5) ;은 Java에서 마침표를 의미한다.
		(6) { }는 Java에서 바디라고 말하며, 한 영역의 시작과 끝을 표시한다
		(7) 코딩 자체에 영향을 주지 않는 주석을 쓰고 싶다면 //을 사용한다.
			*주석 단축키 : crtl + /
		(8) Jave는 대소문자를 구분하며, Class와 파일명의 이름이 같아야한다.
		(9) 코딩 순서 : 요구사항을 먼저 파악한 후에, 변수 확인 > 타입 결정 > 정의 > 할당 > 코딩 > 출력
		
			**해당 줄 복사 단축키 : crtl + d
	

4. Java Method(출력)
	1) System.out.print() : 괄호안의 내용을 출력합니다.
	2) System.out.println() : 괄호안의 내용을 출력한 뒤에 줄을 바꿉니다.
	3) System.out.printf() : 형식을 지정하여 출력하는 Method입니다. < 공부 필요, 이해못함
	4) +는 산술연산자로 사용이 되기도 하지만 출력 Method에서 문자열 결합으로도 쓰인다.
		ex) System.out.println("햄버거는 " + x + "원이다.") -> 햄버거는 x원이다.로 출력
			
			**System.out.println() 단축어 : sout
	

5. Java 변수와 할당
	1) 변수의 종류로는 int, String, char, double, float이 있다.
		(1) float과 double은 둘 다 실수에서 사용을하는데, float은 작은 실수에만 적용이 돼서 잘 사용하지 않는다
			*double이 float보다 더 큰 개념의 범위를 가지고 있음(float이 double에 속하는 개념)
				*그러한 이유로 밑에서는 double에 대해서만 서술
		(2) 읽기와 쓰기의 개념(변수 할당 > 쓰기)
		(3) 변수 선언은 한번만 가능하고, 할당은 덮어쓰기(치환)가 가능하다.
			ex)한 코딩에서 int x = 3;, int x = 5;는 불가능하지만, int x = 3;, x = 5;는 가능하다.
	2) int
		(1) 변수가 정수형(1, 2, 3...)일때 사용
				ex) int x, y, z;
		(2) int x; 등으로 변수를 선언하고, x = 3 등의 방식으로 변수를 할당(정의)한다.
				*int x = 3, y = 5; 등의 방식으로도 사용이 가능하다.
		(3) x = y + 3의 경우에 진행 방향은 오른쪽에서 왼쪽으로 봐야한다. (후에 연산자 우선순위와도 관련있음)
			*y + 3이 먼저 산술되고, 결과 값이 =(대입)을 통해서 x에 할당되는 방식.
	3) String
		(1) 변수가 문자열일때 사용
			*String messsage = "안녕"
				*System.out.println(messsage) -> 안녕이 출력된다.
	4) double
		(1) 변수가 실수형(1.0, 2.0, 3.0...)일때 사용
		(2) 연산과정에서 실수형은 실수형끼리만 연산이 되고, 정수형은 정수형 끼리만 연산이 된다. << 형변환 적용되는지 확인해야함.
			* int x = 3; double y = 3.0으로 정의했다면 x * y는 성립되지 않는다.
				** 둘 다 실수형으로 정의한뒤 결과값을 정수형으로 바꾸는건 가능하다. ( (int)사용 ) 
	5) boolean
		(1) 변수가 참(true) 또는 거짓(false)일때 사용한다.
	6) char
		(1) 변수가 문자일때 사용한다.
			* char = 'a'
			
				**변수 선언은 프로그램이 끝나면 사라진다(메모리의 작동 방식)
				**식별자의 연관성
				: 예를 들어 String age; 라고 정의를 한다면, age에 문자열을 할당해 오류는 방지할 수 있지만,
				: 일반적으로 age는 숫자를 말하기 때문에 String이 아닌 int를 사용해 정수를 할당하는것이 좋다.


6. Jave 연산
	1) 연산자(Operator)와 피연산자(Operand)
		(1) 연산자 : 연산 작업을 수행하기 위해 사용하는 기호(symbol)이나 키워드
		(2) 피연산자 : 연산자의 입력값으로 사용되는 데이터, 즉 연산자가 처리하는 대상으로 리터럴, 변수, 상수, 결과값등을 말한다.
	2) 연산자의 우선순위
		: 전위연산자(++x, --y...) > 단항 > 산술 > 이항 > 관계 > 비트 > 논리 > 조건 > 대입 > 후위연산자(x++, y--...)
	3) 산술 연산자
		: +, -, *, / , %(나머지)를 산술 연산자라고 한다.
	4) 대입 연산자
		: =이 대입 연산자이다.
	5) 복합 연산자
		(1) +=, *=, -=등을 복합 연산자라고 한다.
		(2) 대입 연산자의 한 종류이다.
		(3) String의 경우에는 문자열을 결합한다.
		(4) 숫자의 경우에는 누적한다
			ex) x += 3 -> x = x + 3
	6) 증감 연산자
		(1) 증감연산자 : ++(+1), --(-1)이 있다.
		(2) 증감연산자는 전위연산자, 후위연산자로 나뉘는데, 값의 앞에 있으면 전위연산자, 값의 뒤에 있으면 후위연산자이다.
			*전위연산자의 우선순위는 최우선이고, 후위연산자의 우선순위는 최하위이다.
	7) 관계 연산자(비교 연산자)
		(1) 관계 연산자 : <,  <=,  >,  >=,  ==,  !=(<>)
		(2) 관계 연산자의 결과는 boolean으로 정의한다.
	6) 논리 연산자
		(1) 논리 연산자 : &&(all), ||(or), !(not)
		(2) 논리 연산자 또한 boolean으로 정의되는데 &&는 조건 모두가 참일때 true, ||는 조건중 하나라도 참이면 true, !는 결과값을 반대로 바꾼다.
	7) 조건 연산자(3항 연산자)
		(1) 조건 연산자 : result = Condition ? truepart : falsepart ;
			*참일 경우 truepart 실행, 거짓일 경우 falsepart 실행.
			*Condition의 경우 대부분 관게 연산자가 온다.
	
7. 데이터 형변환
	1) Casting 연산자 :  Casting은 데이터의 타입을 한시적으로 바꾸는것을 말한다.
	2) 암시적(암묵적) 형변환
		(1) 자바 프로그램 자체에서 자동으로 형이 변환되는것을 말한다.
			*double d = 100을 출력하면 100이 아닌 100.0으로 출력된다.
	3) 명시적 형변환
		(1) 개발자가 직접 Casting하여 형이 변환되는것을 말한다.
			*int i = (int)12.5를 출력하면 12.5가 아닌 12가 출력된다.
				ex) System.out.println(14/5); = 2
					System.out.println((double)14/5); = 2.8 (14가 먼저 명시적으로 14.0으로 바뀌고 뒤의 5가 암묵적으로 5.0으로 바뀌어 계산)
					System.out.println((double)(14/5)) - 2.0 (14/5가 먼저 산술되고 명시적 형변환이 이루어져서 결과값은 2.0)
8. 선택문(조건문)
	1) 단순 if문 : if(조건문){조건문이 참일때 실행}
	2) 양자 택일 if문 : if(조건문){조건문이 참일때 실행}else{조건문이 거짓일때 실행}
	3) 다중 택일 if문 : if[조건문]}조건문이 참일때 실행}else if(앞의 조건문이 거짓일때 실행){조건문이 참일때 실행}...
		*다중 택일 if문은 if( ){ }else{if( ){ }else if( ){}...}등으로도 사용 가능하다. 
