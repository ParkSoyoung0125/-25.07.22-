[Todo]
1. 연산자

	* 단축키
	Ctrl + D : 코드 한줄을 아래에 바로 복사.

1. 변수와 연산자
	* 연산자는 우선순위가 있음.
	- 연산자 : 연산 작업을 수행하기 위해 사용하는 기호 및 키워드.
	- 피연산자 : 연산자의 입력 값으로 사용되는 데이터. = 연산자가 처리하는 대상(리터럴, 상수, 변수 등).
	
	* 연산자 우선 순위
	단항 >> 산술 >> 이항 >> 관계 >> 비트 >> 논리 >> 조건  >> 대입
	(높음)												(낮음)
	
	(1) 산술 연산자
	종류 : +	-	*	/	%	(5개)
	
	% : 수를 나누고 남은 나머지. 
		(ex) 14 % 5 = 4, 19 % 7 = 5
		
	/ : 정수 / 정수 = 정수, 정수 / 실수 = 실수. 
		(ex) 14 / 5 = 2, 14 / 5.0 = 2.8		* 정수에서 실수로 타입이 변함(데이터 타입 변환)
		
	(2) 대입 연산자
		-1) 단순 대입 연산자
			종류 : =
			
		-2) 복합 대입 연산자
			종류 : +=   -=   *=   /=   %=
				+= : 왼쪽 변수에 오른쪽 값을 더해서 결과를 왼쪽 변수에 저장.
				-= : 왼쪽 변수에 오른쪽 값을 빼서 결과를 왼쪽 변수에 저장. 값이 음수면 음수로 출력.
				*= : 왼쪽 변수에 오른쪽 값을 곱해서 결과를 왼쪽 변수에 저장.
				/= : 왼쪽 변수에 오른쪽 값을 나눠서 결과를 왼쪽 변수에 저장.
				%= : 왼쪽 변수에 오른쪽 값을 나눈 나머지 값을 왼쪽 변수에 저장.
		
	(3) 증감연산자
	- 변수가 아닌 수식에는 사용 불가능. (ex)(a+b)++ 불가능.
	- 실수에도 적용 가능
		* 전위 증감 연산자 : 연산 전에 모든 연산자보다 먼저 수행됨.
			++a(전위 증가 연산자) : 연산하기 전에 a값을 1 증가시킴.
			--a(전위 감소 연산자) : 연산하기 전에 a값을 1 감소시킴.
			
		* 후위 증감 연산자 : 연산 후에 모든 연산자보다 나중에 수행됨.
			a++(후위 증가 연산자) : 연산한 후에 a 값을 1 증가시킴.
			a--(후위 감소 연산자) : 연산한 후에 a 값을 1 감소시킴.
			
			<예시 1>
			a = 10 , b = 20
			c = ++a + b++ ;
              3  1  2  4
            1) ++a 먼저 수행
            2) a + b 수행 (11 + 20)
            3) c에 변수 할당 (c = 31)
            4) b에 변수 할당 (b = 21)
            
			
			c = a++ + --b ;
              3  4  2  1
            1) 원래 왼쪽부터 수행하지만(a++) 전위 감소 연산자라 --b 먼저 수행 (b = 20)
            2) a + b 수행 (11 + 20)
            3) c에 변수 할당 (c = 31)
            4) a에 변수 할당 (a = 12)
			
			<예시 2>
			a = 15 , b = 12
			c  =  --a  +  --b ;
               4   1   3    2
            1) --a 먼저 수행 (a = 14)
            2) --b 수행 (b = 11)
            3) + 연산 수행 (14 + 11)
            4) = 연산 수행 (c = 25)
			
			<예시 3>
            a = 10 , b = 20 

            ++a ;
            b-- ;
            c  =  ++a  +  b--;
               3   1   2   4
            
            (1) ++a = 11
			(2) b-- = 19 / 아래 구문 수행 시 연산된 값으로 연산 수행.
			(3) (1)에서 수행된 값으로 연산(++a = 12)
            (4) + 연산 수행 ( 12 + 19 )
            (5) c에 대입 (c = 31)
            (6) b-- 연산 수행 ( b = 18)
			
			<예시 4>
			x = 4, y = 4, z = 7
			z += --x + y++ ; // z = z + --x + y++ ;
			  3   1  2  4	=     4   2  1  3  5
			  x = 3
			  y = 4 + 1 = 5
			  z = 7(z) + 3(--x) + 4(y++) = 14
	
	(4) 관계 연산자
	- 두 개의 값 또는 표현식을 비교하여 참 또는 거짓을 반환.(boolean)
		-1) 비교 연산자
			<	~보다 작음	첫번째가 두번째보다 작은지 검사(미만)		// 'a' < 'b' : 문자도 내부에서 아스키코드(숫자)로 변환됨
																				(ex) a = 97, b = 98
			>	~보다 큼		첫번째가 두번째보다 큰지 검사(초과)
			<=	작거나 같음	첫번째가 두번째보다 작거나 같은지 검사(이하)
			>=	크거나 같음	첫번쨰가 두번째보다 크거나 같은지 검사(이상)
			==	같음			두 대상이 동일한지 검사
		-2) 항등 연산자
			!=	<>			두 대상이 동일하지 않은지 검사
			
	(5) 논리 연산자
	- if 문에서 여러 조건을 결합하여 논리적인 표현식을 만들거나, while문에서 조건이 충족될때까지 반복 등.
	- 필터링, 조건부 할당 등에서도 사용.
	- 우선순위		not(!) >> and(&&)  >> or(||)
		-1) and 연산자(&&) : 모든 조건이 참일때만 전체 표현식이 참으로 인정. 
							숫자곱셈과 동작이 유사해 논리곱이라고도 부름.
							1*1 = 1 / 1*0 = 0 / 0*0 = 0
		-2) or 연산자(||) : 조건 중 하나라도 참이면 전체 표현식이 참.
		-3) not 연산자(!) : 피연산자의 불리언 값을 반대 상태로 변환
		
		<예시>
		(1)	4 < 5 && 3 != 6		// and(&&)	조건식 두개 전부 참이므로 true.
		(2)	4 > 7 || 3 == 6		// or(||)	조건식 두개 전부 거짓이므로 false.
		(3)	boolean bool = !(4 > 7 || 3 == 6);	조건식 두개 전부 거짓이므로 false이나, 
												전체표현식이 not연산자(!)로 인해 반대상태로 변환되어 true.
												
	(6) 조건 연산자(삼항 연산자:3개의 피연산자 보유)
	- 사용형식 : result = Condition  ?  truepart  :  falsepart ;
					   항1(조건식)		항2			항3
	- Condition이 참인 경우 truepart 영역이 실행, 거짓인 경우 falsepart 영역이 실행됨.
	
			(예시)
			int a = 3, b = 5 ;
			int result = a >= b ? a - b : b - a ;